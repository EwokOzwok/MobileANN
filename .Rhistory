f7Stepper("DEP2", "Depression: Time 2", value=NULL, min=0, max=42, step=1, size="small"),
hr(),
f7Stepper("PEARLS2", "PEARLS Score: Time 2", value=NULL, min=0, max=17, step=1, size="small"),
hr(),
f7Stepper("GQmean2", "Gratitude Score: Time 2", value=NULL, min=1, max=7, step=1, size="small"),
hr(),
f7Stepper("SJ2", "Self-Judgment Score: Time 2", value=NULL, min=2, max=10, step=1, size="small"),
hr(),
f7Stepper("OI2", "Over-Identification Score: Time 2", value=NULL, min=2, max=10, step=1, size="small"),
hr(),
f7Stepper("I2", "Isolation Score: Time 2", value=NULL, min=2, max=10, step=1, size="small"),
hr(),
f7Stepper("SK2", "Self-Kindness Score: Time 2", value=NULL, min=2, max=10, step=1, size="small"),
hr(),
f7Stepper("M2", "Mindfulness Score: Time 2", value=NULL, min=2, max=10, step=1, size="small"),
hr(),
f7Stepper("CH2", "Common Humanity Score: Time 2", value=NULL, min=2, max=10, step=1, size="small"),
hr(),
f7Stepper("AHSa2", "Agency Score: Time 2", value=NULL, min=4, max=32, step=1, size="small"),
hr(),
f7Stepper("AHSp2", "Pathways Score: Time 2", value=NULL, min=4, max=32, step=1, size="small"),
f7Stepper("RSE2", "Self-Esteem Score: Time 2", value=NULL, min=10, max=40, step=1, size="small")
))),
hairlines = F, strong = T, inset =
F, tablet = FALSE)))),
f7Tab(
tabName = "Downloadtab",
icon = f7Icon("cloud_download"),
active = TRUE,
f7Block(
f7Shadow(
intensity = 5,
hover = TRUE,
f7Card(title = "Download Example Data",
br(),
f7Segment(container=c("row"),
f7DownloadButton("downloadnormal","Normal"),
f7DownloadButton("downloadmild","Mild")),
br(),
br(),
f7Segment(container=c("row"),
f7DownloadButton("downloadmoderate","Moderate"),
f7DownloadButton("downloadsevere","Severe")),
br(),
hairlines = F, strong = T, inset =
F, tablet = FALSE))
)
)
)
)
)
)
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
install.packages("shiny")
install.packages("rsconnect")
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE, rsconnect.packrat = TRUE)
MobileANN::run_app() # add parameters here (if any)
library(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE, rsconnect.packrat = TRUE)
MobileANN::run_app() # add parameters here (if any)
library(rsconnect)
accounts(server = NULL)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE, rsconnect.packrat = TRUE)
MobileANN::run_app() # add parameters here (if any)
remotes::install_github("rstudio/renv")
remotes::install_version("rsconnect", "1.0.1")
remotes::install_github("rstudio/renv")
remotes::install_version("rsconnect", "1.0.1")
remotes::install_github("rstudio/renv")
remotes::install_version("rsconnect", "1.0.1")
## Run checks ----
## Check the package before sending to prod
devtools::check()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
install.packages()
install.packages("covrpage")
library(covrpage)
renv::dependencies()
library(golem)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE, rsconnect.packrat = TRUE)
MobileANN::run_app() # add parameters here (if any)
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
renv::install("rstudio/shiny")
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
remotes::install_github('yonicd/covrpage')
remotes::install_github('yonicd/covrpage')
remotes::install_github('yonicd/covrpage', force=T)
install.packages("curl")
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
renv(status)
status(renv)
library(MobileANN)
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
# Deploy to Posit Connect or ShinyApps.io
# In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R",
"www/",
"srcjc/",
"Seq3/"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
library(MobileANN)
MobileANN::run_app() # add parameters here (if any)
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
golem::add_shinyappsio_file()
renv::init()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE, renv.config.ignore.self = FALSE)
MobileANN::run_app() # add parameters here (if any)
renv::install("EwokOzwok/MobileANN")
install.packages("curl", dependencies=T)
install.packages("curl", dependencies = T)
renv::install("EwokOzwok/MobileANN")
library(MobileANN)
run_app()
library(MobileANN)
model <- load_model_tf(filepath="Seq3", compile = T)
model <- keras::load_model_tf(filepath="Seq3", compile = T)
model <- keras::load_model_tf(filepath="Seq3", compile = T)
reticulate::virtualenv_create('r-reticulate')
virtualenv_create("r-reticulate")
install_python(version = "3.9:latest", list = FALSE, force = FALSE)
reticulate::install_python(version = "3.9:latest", list = FALSE, force = FALSE)
model <- load_model_tf(filepath="Seq3", compile = T)
library(keras)
model <- load_model_tf(filepath="Seq3", compile = T)
load_model_weights_tf(filepath="Seq3")
py_config()
py-config
setwd("C:/Users/intra/OneDrive/Desktop/Shiny Apps/ANNPred/MobileANN")
model <- load_model_tf(filepath="Seq3", compile = T)
model <- load_model_tf(filepath="./Seq3/saved_model.pb", compile = T)
model <- load_model_tf(filepath="./Seq3/saved_model.pb", compile = T)
model <- load_model_tf(filepath="Seq3/saved_model.pb", compile = T)
model <- keras::load_model_tf(filepath="Seq3/saved_model.pb", compile = T)
model <- keras::load_model_tf(filepath="Seq3/", compile = T)
model <- keras::load_model_tf(filepath=".\\Seq3/", compile = T)
model <- keras::load_model_tf(filepath=".\\Seq3", compile = T)
model <- keras::load_model_tf(filepath="Seq3", compile = T)
model <- keras::load_model(filepath="Seq3", compile = T)
tensorflow::view_savedmodel("Seq3")
tensorflow::view_savedmodel("Seq3/saved_model.pb")
tensorflow::view_savedmodel("./Seq3/")
tensorflow::view_savedmodel("./Seq3/saved_model.pb")
model <- keras::load_model(filepath="Seq3", save_format="tf", compile = T)
keras::load_model_tf()
# Load Model on Startup ---------------------------------------------------
new_model <- load_model_tf('Seq3')
tensorflow::install_tensorflow(version="2.0.0")
tensorflow::install_tensorflow(version="2.0.0")
remove.packages("tensorflow")
remove.packages("tensorflow")
tensorflow::install_tensorflow(version="2.0.0")
installed.packages("tensorflow")
install.packages("tensorflow")
library(reticulate)
python_path
install_tensorflow(version = "2.7")
install_tensorflow(version = "2.7")
library(tensorflow)
install_tensorflow(version = "2.7")
library(keras)
model<-keras::load_model_tf("Seq3",compile=T)
model <- keras::load_model_tf(filepath="Seq3" compile = T)
model <- keras::load_model_tf(filepath="Seq3", compile = T)
setwd("C:/Users/intra/OneDrive/Desktop/Shiny Apps/ANNPred/MobileANN")
model <- keras::load_model_tf(filepath="Seq3", compile = T)
detach("tensorflow")
remove.packages("tensorflow")
remove.packages("tfautograph")
remove.packages("tfruns")
remove.packages("keras")
library(MobileANN)
setwd("C:/Users/intra/OneDrive/Desktop/Shiny Apps/ANNPred/MobileANN")
run_app()
model <- keras::load_model_tf(filepath="Seq3", compile = T)
model$get_config
model$layers
summary(model)
summary(model[[1]])
model$count_params
x<-summary(model)
x
print(x)
substr(x, start=1, stop=10)
substr(x, start=1, stop=20)
substr(x, start=12, stop=20)
substr(x, start=8, stop=20)
substr(x, start=9, stop=20)
substr(x, start=20, stop=40)
substr(x, start=40, stop=100)
substr(x, start=40, stop=200)
substr(x, start=40, stop=202)
substr(x, start=40, stop=208)
substr(x, start=202, stop=225)
substr(x, start=190, stop=225)
substr(x, start=199, stop=225)
substr(x, start=196, stop=225)
substr(x, start=197, stop=225)
substr(x, start=197, stop=202)
substr(x, start=197, stop=201)
substr(x, start=202, stop=600)
substr(x, start=202, stop=12000)
substr(x, start=202, stop=1200)
x
write.csv(x,"C:/users/intra/onedrive/desktop/x.csv", row.names = F)
reticulate::py_install("pydot", pip = TRUE)
plot.keras.engine.training.Model
keras::plot(  model,
show_shapes = FALSE,
show_dtype = FALSE,
show_layer_names = TRUE,
...,
rankdir = "TB",
expand_nested = FALSE,
dpi = 96,
layer_range = NULL,
show_layer_activations = FALSE,
to_file = NULL
)
reticulate::conda_install(packages = “graphviz”)
reticulate::conda_install(packages = 'graphviz')
reticulate::conda_install(packages = "graphviz")
devtools::install_github("andrie/deepviz")
library(deepviz)
deepviz::
deepviz::
model %>% plot_model()
library(dplyr)
model %>% plot_model()
usethis::use_package("deepviz")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
library(MobileANN)
library(MobileANN)
run_app()
model %>% deepviz::plot_model()
model <- keras::load_model_tf(filepath="Seq3", compile = T)
plot_model(model = model)
summary(model)
c(11,11,4) %>% plot_deepviz()
c(4, 10, 10, 1) %>%
plot_deepviz()
plot_deepviz(c(2,2,2))
plot_deepviz(2)
plot_deepviz(2,1)
c(4, 10, 10, 3) %>%
plot_deepviz()
library(deepviz)
library(magrittr)
c(4, 10, 10, 3) %>%
plot_deepviz()
model %>%
plot_deepviz()
plot_deepviz()
plot_deepviz(n=c(1,1))
model %>% plot_model()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
tagList(
f7Card(
f7Align(h2("Model"), side=c("left")),
tags$img(src='www/NeuralNet.png', width='50%',height='auto'),
hairlines = F, strong = T, inset =
F, tablet = FALSE)
)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
library(MobileANN)
run_app()
run_app()
library(MobileANN)
run_app()
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
library(MobileANN)
run_app()
devtools::install_github("EwokOzwok/MobileANN")
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
MobileANN::run_app() # add parameters here (if any)
library(MobileANN)
devtools::install_github("EwokOzwok/MobileANN")
golem::add_shinyappsio_file()
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
library(MobileANN)
run_app()
remove.packages("MobileANN")
library(MobileANN)
run_app()
library(MobileANN)
run_app()
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile_with_renv("deploy", port = 3838)
?add_dockerfile_with_renv
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile_with_renv(output_dir="deploy", port = 3838)
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile_with_renv(output_dir="deploy", port = 3838)
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile_with_renv(output_dir="deploy", port = 3838)
